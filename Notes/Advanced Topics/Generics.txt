-Solves the problem that we need to create a List class for every type we need, witout creating a list of OBJECTS => 
{
	-List of objects can lead to performance penalties, because of the boxing!
}
-Syntax => T => Template/Type
{
	public class GenericList<T> 
	{
		public void Add(T value)
		{
				
		}
		public T this[int index] 
		{
		 get { }
		}
	}
	var numbers = new GenericList<int>(); //At runtime the list is converted to a list of Integers, so no performance penalty!
}
-System.Collections.Generic => Location of generics
-Multiple parameters => 
{
	public class GenericDictionary<TKey, TValue>
	{
		public void Add(TKey key, TValue value)
		{
			
		}
	}
	var dictionary = new GenericDictionary<string, Book>();
	dictionary.Add("Harry Potter", new Book())
}
-Constrains => Limitate the Types that supports =>
{
	// Generic method, receives only Comparables values! 
	-public T Max<T>(T a, T b) where T : IComparable 
	{
		return a.CompareTo(b) > 0 ? a : b;
	}

	//The same but within the class => 
	-public class Utilities<T> where T : IComparable
	{
		public T Max(T a, T b)
		{
			return a.CompareTo(b) > 0 ? a : b;
		}
	}
}
-Five types of constrains => 
{
	.IComparable -> Interface constrain.
	.Product -> Class constrain.
	.struct -> Value Type.
	.class -> Reference Type.
	.new() -> Object with default constructor.
}f